name: AAPS CI

on:
  workflow_dispatch:
    inputs:
      buildVariant:
        description: 'Select Build Variant'
        required: false
        default: 'fullRelease'
        type: choice
        options:
          - fullRelease
          - fullDebug
          - aapsclientRelease
          - aapsclientDebug
          - aapsclient2Release
          - aapsclient2Debug
          - pumpcontrolRelease
          - pumpcontrolDebug

jobs:
  build:
    name: Build AAPS
    runs-on: ubuntu-latest
    steps:
      - name: Decode Secrets Keystore to Env
        run: |
          if [ -n "${{ secrets.KEYSTORE_SET }}" ]; then
            echo "üîê Decoding KEYSTORE_SET..."
            DECODED=$(echo "${{ secrets.KEYSTORE_SET }}" | base64 -d)
            KEYSTORE_BASE64=$(echo "$DECODED" | cut -d'|' -f1)
            KEYSTORE_PASSWORD=$(echo "$DECODED" | cut -d'|' -f2)
            KEY_ALIAS=$(echo "$DECODED" | cut -d'|' -f3)
            KEY_PASSWORD=$(echo "$DECODED" | cut -d'|' -f4)
            echo "KEYSTORE_BASE64=$KEYSTORE_BASE64" >> $GITHUB_ENV
            echo "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> $GITHUB_ENV
            echo "KEY_ALIAS=$KEY_ALIAS" >> $GITHUB_ENV
            echo "KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV
            echo "::add-mask::$KEYSTORE_BASE64"
            echo "::add-mask::$KEYSTORE_PASSWORD"
            echo "::add-mask::$KEY_ALIAS"
            echo "::add-mask::$KEY_PASSWORD"
            echo "‚úÖ Keystore parameters extracted from KEYSTORE_SET"
          else
            echo "‚ÑπÔ∏è Using separate secrets."
            echo "KEYSTORE_BASE64=${{ secrets.KEYSTORE_BASE64 }}" >> $GITHUB_ENV
            echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
            echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
            echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
          fi

      - name: Check Secrets
        run: |
          echo "üîç Checking required secrets..."
          MISSING=0
          check_secret() {
            if [ -z "$1" ]; then
              echo "‚ùå Missing secret: $2"
              MISSING=1
            fi
          }
          # wymagane (bez Google Drive)
          check_secret "$KEYSTORE_BASE64" "KEYSTORE_BASE64"
          check_secret "$KEYSTORE_PASSWORD" "KEYSTORE_PASSWORD"
          check_secret "$KEY_ALIAS" "KEY_ALIAS"
          check_secret "$KEY_PASSWORD" "KEY_PASSWORD"
          if [ "$MISSING" -eq 1 ]; then
            echo "üõë Missing required secrets. Stopping build."
            exit 1
          fi
          echo "‚úÖ All required secrets are present."

      - name: Decode keystore file
        run: |
          mkdir -p "$RUNNER_TEMP/keystore"
          echo "$KEYSTORE_BASE64" | base64 -d > "$RUNNER_TEMP/keystore/keystore.jks"

      - name: Validate keystore, alias and password
        run: |
          set -e
          echo "üîê Validating keystore, alias and password"
          echo "test" > dummy.txt
          zip -q dummy.jar dummy.txt
          rm dummy.txt
          if ! jarsigner \
              -keystore "$RUNNER_TEMP/keystore/keystore.jks" \
              -storepass "$KEYSTORE_PASSWORD" \
              -keypass "$KEY_PASSWORD" \
              dummy.jar "$KEY_ALIAS" > /dev/null 2>&1; then
            echo "‚ùå Either KEYSTORE_BASE64, KEYSTORE_PASSWORD, KEY_PASSWORD, or KEY_ALIAS is incorrect"
            exit 1
          fi
          rm -f dummy.jar
          echo "‚úÖ Keystore, alias, and key password are valid."

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set BUILD_VARIANT
        run: |
          BUILD_VARIANT="${{ github.event.inputs.buildVariant }}"
          if [ -z "$BUILD_VARIANT" ]; then BUILD_VARIANT="fullRelease"; fi
          echo "BUILD_VARIANT=$BUILD_VARIANT" >> $GITHUB_ENV
          VARIANT_FLAVOR=$(echo "$BUILD_VARIANT" | sed -E 's/(Release|Debug)$//' | tr '[:upper:]' '[:lower:]')
          VARIANT_TYPE=$(echo "$BUILD_VARIANT" | grep -oE '(Release|Debug)$' | tr '[:upper:]' '[:lower:]')
          echo "VARIANT_FLAVOR=$VARIANT_FLAVOR" >> $GITHUB_ENV
          echo "VARIANT_TYPE=$VARIANT_TYPE" >> $GITHUB_ENV
          VERSION_SUFFIX=""
          if [[ "$VARIANT_FLAVOR" != "full" ]]; then VERSION_SUFFIX="$VARIANT_FLAVOR"; fi
          if [[ "$VARIANT_TYPE" == "debug" ]]; then VERSION_SUFFIX="$VERSION_SUFFIX-debug"; fi
          if [[ -n "$VERSION_SUFFIX" && "$VERSION_SUFFIX" != -* ]]; then VERSION_SUFFIX="-$VERSION_SUFFIX"; fi
          echo "VERSION_SUFFIX=$VERSION_SUFFIX" >> $GITHUB_ENV

      - name: Extract VERSION
        run: |
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          if echo "$BRANCH_NAME" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$'; then
            VERSION="$BRANCH_NAME"
          else
            VERSION=$(grep 'val appVersion' buildSrc/src/main/kotlin/Versions.kt | awk -F '"' '{print $2}')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build APKs
        run: |
          ./gradlew assemble${{ env.BUILD_VARIANT }} \
          -Dorg.gradle.jvmargs="-Xmx8g -XX:+UseParallelGC -Xss1024m" \
          -Dkotlin.daemon.jvm.options="-Xmx2g" \
          -Dkotlin.compiler.execution.strategy="in-process" \
          -Dorg.gradle.daemon=true \
          -Dorg.gradle.workers.max=8 \
          -Dorg.gradle.caching=true \
          -Pandroid.injected.signing.store.file="$RUNNER_TEMP/keystore/keystore.jks" \
          -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
          -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
          -Pandroid.injected.signing.key.password="$KEY_PASSWORD"

      - name: Rename APKs with version
        run: |
          set -e
          APP_SRC="app/build/outputs/apk/${{ env.VARIANT_FLAVOR }}/${{ env.VARIANT_TYPE }}"
          WEAR_SRC="wear/build/outputs/apk/${{ env.VARIANT_FLAVOR }}/${{ env.VARIANT_TYPE }}"
          APP_OUT="aaps-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk"
          WEAR_OUT="aaps-wear-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk"
          if compgen -G "$APP_SRC/*.apk" > /dev/null; then
            mv "$APP_SRC"/*.apk "$APP_OUT"
          else
            echo "‚ö†Ô∏è No app APK found at $APP_SRC"
          fi
          if compgen -G "$WEAR_SRC/*.apk" > /dev/null; then
            mv "$WEAR_SRC"/*.apk "$WEAR_OUT"
          else
            echo "‚ÑπÔ∏è No wear APK found at $WEAR_SRC (ok if you didn't build wear)."
          fi

      name: Upload APKs as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aaps-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}
          path: |
            aaps-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk
            aaps-wear-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk
          if-no-files-found: ignore
          retention-days: 14
